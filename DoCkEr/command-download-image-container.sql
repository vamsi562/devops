-------------- DOCKER COMMANDS ---------------

------------------- IMAGES ---------------------------------
docker hub : repository of docker images
 
-> to run docker commands we need to become root USER
     "sudo su" 
-> downloading docker images from docker hub
    "docker pull image_name"
-> to list docker images
    "docker image ls"
-> running docker image 
    "docker run image_name"
-> to stop docker image
    "docker stop image_name"
-> to remove docker image
    "docker rmi image_name"
	"docker rmi -f image_name"  --> "-f  forcibly"
-> to search for docker images
    "docker search image_name"
-> to remove all images that are not attched to containers
    "docker system prune -a"
	
-------------- CONTAINERS -----------------
-> to list running containers
   "docker container ls"
-> to list running and stopped containers
   "docker ps -a"
-> to create container from image
   " docker run image_name"
-> to start container
   "docker start container_name/id"
-> to stop container
   "docker stop container_name/id"
-> to stop all running containers
   "docker stop $(docker ps -aq)"
-> to restart container 
   "docker restart -t 10 container_name/id" --> it will restart container after 10 mins
-> to restart all containers
   "docker restart $(docker ps -aq)"
-> to remove stopped container
   "docker rm container_name/id "
-> to remove running container
   "docker rm -f container_name/id"
-> to remove all stopped containers
   "docker rm $(docker ps -aq)"
-> to remove all running and stopped containers
   "docker rm -f $(docker ps -aq)"
-> to see ports of container 
   "docker port container_name/id"
-> to get detailed info about container
   "docker inspect container_name/id"
-> to see logs generated by container 
   "docker logs container_name/id"
-> To execute anycommand in a container 
   "docker exec -it container_name/container_id command"
   Eg: To launch the bash shell in a contianer 
   "docker exec -it container_name/container_id    bash"

-------------- RUN COMMAND OPTIONS ------------
-it -> interactive terminal
-d  -> run process in detached mode as background processes
-p  -> port mapping between container port  and docker host -- we will specify docker host port
-v  -> attching volume to a container

-e  -> environment variable
-P  -> port mapping between container port and docker host port automatically 
       --"it will map the internal port of the container with some port on host machine"
       --"This host port will be some number greater than 30000" 
"--name"    -> naming a container
"--network" -> used to run container on specific NETWORK
"--memory"  -> used to specify max amount of ram that container can USE
"--link"    -> used for linking containers for multi container architecture

-------------- Tomcat container ---------------
. "docker pull tomee" -- it will pull and download image 
                    -- if we donot specify version it will pull latest image
. "docker image ls"   -- list images
. "docker run --name mytom -p 7070:8080 tomee" -- it will run image i.e container
-- 7070 of docker host port mapped to 8080 container on which tomcat runs
. to check tomcat running or not 
public-ip of docker host : 7070 -- as we mapped 7070 docker host ports
"http://44.195.89.66:7070"
. remove container
  - by stopping:
    "docker stop container_name"
	"docker rm container_name"
  - even if running
    "docker rm -f container_name"
. to run tomcat in detached MODE
  "docker run --name mytommy -p 7070:8080 -d tomee" -d -- detached

-------- ubuntu CONTAINER ------------------

to run ubuntu
"docker run -name myubuntu ubuntu"
for interactive terminal
"docker run  -it ubuntu "
exit -> come out of ubuntu container terminal

--------- nginx CONTAINER -----------
"docker run --name mynginx -P -d ngnix"
-- it will download latest image and map port automatically and run image in detached mode
"docker port mynginx" -- display port of docker host mapped to container port
to access nginx
"publicip of dockerhost:mapped dockerhost port"

---------- MYSQL CONTAINER -----------
"docker run --name mydb -d -e MYSQL_ROOT_PASSWORD = vamsi MYSQL:5"
-- for mysql container we need to declare env variable '-e'
-- mysql:5 image name :tag we are downloading mysql image of 5th tag
"docker exec -it container_name terminal" -- on which terminal we want interaction
"docker exec -it mydb bash" -- open interactive terminal of mydb container in bash
"mysql -u root -p" -- "u-user,p-password"
we will move into sql terminal 
to create table we need to select DATABASE
"show database" -- display databases
"use databasename"  -- we are using particular database to create TABLES
exit-> we will come out of DATABASE
exit-> we will come out of container
 
